[
  {
    "name": "Ramda",
    "url": "https://github.com/ramda/ramda"
  },
  {
    "name": "Ramda Adjunct",
    "url": "https://github.com/char0n/ramda-adjunct"
  },
  {
    "name": "Ramda-extension",
    "url": "https://github.com/tommmyy/ramda-extension"
  },
  {
    "name": "Rambda",
    "url": "https://github.com/selfrefactor/rambda",
    "description": "A faster alternative to Ramda in under 10kB."
  },
  {
    "name": "Rambdax",
    "url": "https://github.com/selfrefactor/rambdax",
    "description": "Extended version of Rambda"
  },
  {
    "name": "Folktale",
    "url": "http://folktale.origamitower.com/"
  },
  {
    "name": "lodash/fp",
    "url": "https://github.com/lodash/lodash/wiki/FP-Guide"
  },
  {
    "name": "functional.js",
    "url": "https://github.com/functionaljs/functional-js"
  },
  {
    "name": "101",
    "url": "https://github.com/tjmehta/101"
  },
  {
    "name": "fnuc",
    "url": "https://github.com/algesten/fnuc"
  },
  {
    "name": "barely-functional",
    "url": "https://github.com/cullophid/barely-functional"
  },
  {
    "name": "bluebird-promisell",
    "url": "https://github.com/zhangchiqing/bluebird-promisell",
    "description": "A practical functional programming library for promises."
  },
  {
    "name": "prelude.ls",
    "url": "http://gkz.github.io/prelude-ls/"
  },
  {
    "name": "preludejs",
    "url": "https://github.com/alanrsoares/prelude-js",
    "description": "Hardcore Functional Programming for JavaScript. -TS."
  },
  {
    "name": "1-liners",
    "url": "https://github.com/1-liners/1-liners"
  },
  {
    "name": "fn-curry",
    "url": "https://github.com/thunklife/fn-curry"
  },
  {
    "name": "curry",
    "url": "https://github.com/thisables/curry"
  },
  {
    "name": "compose-function",
    "url": "https://github.com/stoeffel/compose-function"
  },
  {
    "name": "functionize",
    "url": "https://github.com/paldepind/functionize"
  },
  {
    "name": "lambdajs",
    "url": "https://github.com/loop-recur/lambdajs"
  },
  {
    "name": "fp-dom",
    "url": "https://github.com/fp-dom/"
  },
  {
    "name": "react-on-lambda",
    "url": "https://github.com/sultan99/react-on-lambda",
    "description": "Replace JSX in React with functions (currying, compositions and etc)."
  },
  {
    "name": "trifl",
    "url": "https://github.com/algesten/trifl"
  },
  {
    "name": "funcy",
    "url": "https://github.com/bramstein/funcy"
  },
  {
    "name": "date-fp",
    "url": "https://github.com/cullophid/date-fp"
  },
  {
    "name": "js-joda",
    "url": "https://github.com/js-joda/js-joda"
  },
  {
    "name": "_part_",
    "url": "https://github.com/AutoSponge/_part_"
  },
  {
    "name": "claire",
    "url": "https://github.com/robotlolita/claire"
  },
  {
    "name": "FPO.js",
    "url": "https://github.com/getify/fpo"
  },
  {
    "name": "Javascript Parser Combinator",
    "url": "https://github.com/d-plaindoux/parsec"
  },
  {
    "name": "fun-task",
    "url": "https://github.com/rpominov/fun-task"
  },
  {
    "name": "most",
    "url": "https://github.com/cujojs/most"
  },
  {
    "name": "zen-signals",
    "url": "https://github.com/joaomilho/zen-signals"
  },
  {
    "name": "funfix",
    "url": "https://github.com/funfix/funfix"
  },
  {
    "name": "pico-lambda",
    "url": "https://github.com/trainyard/pico-lambda",
    "description": "Arrays, Strings and things the functional way. A 640b functional library based on native methods. -TS."
  },
  {
    "name": "pareto-js",
    "url": "https://github.com/concretesolutions/pareto.js/",
    "description": "An extremely small, intuitive and fast functional utility library for JavaScript -TS."
  },
  {
    "name": "fpEs",
    "url": "https://github.com/TeaEntityLab/fpEs/",
    "description": "A small library provides simple usages of basic FP & pattern-matching/sumtype & MonadIO/Rx & Optional for Javascript. -TS."
  },
  {
    "name": "Creed",
    "url": "http://blog.briancavalier.com/creed/"
  },
  {
    "name": "TGrid",
    "url": "https://github.com/samchon/tgrid",
    "description": "Grid Computing Framework, Network & Thread extension of TSTL, supporting RFC (Remote Function Call). +TS."
  },
  {
    "name": "Ferrum",
    "url": "https://github.com/adobe/ferrum"
  },
  {
    "name": "fp-ts",
    "url": "https://gcanti.github.io/fp-ts/",
    "description": "Typed functional programming in TypeScript. +CT, +TS."
  },
  {
    "name": "iter-tools",
    "url": "https://github.com/iter-tools/iter-tools",
    "description": "a rich toolset for working with iterables, both sync and async. +TS."
  },
  {
    "name": "remeda",
    "url": "https://remedajs.com/"
  },
  {
    "name": "futil-js",
    "url": "https://github.com/smartprocure/futil-js",
    "description": "A collection of functional utilities that could conceivably be part of a library like lodash/fp, but for some reason or other are not."
  },
  {
    "name": "rubico",
    "url": "https://github.com/a-synchronous/rubico",
    "description": "üèû [a]synchronous functional syntax"
  },
  {
    "name": "rocket-pipes",
    "url": "https://github.com/darky/rocket-pipes",
    "description": "Powerful pipes, that chain Promise and ADT like Maybe or Either from popular FP libraries. +TS"
  },
  {
    "name": "omg-curry",
    "url": "https://github.com/Debdut/omg-curry",
    "description": "Comprehensive Curry Library with Operator Curry, Curry from functions, Decurry and Infifnite Curries."
  },
  {
    "name": "lfi",
    "url": "https://github.com/TomerAberbach/lfi",
    "description": "A Lazy Functional Iteration Library Supporting Sync, Async, and Concurrent Iteration."
  },
  {
    "name": "ts-multimethod",
    "url": "https://github.com/darky/ts-multimethod",
    "description": "TypeScript multimethods inspired by Clojure multimethods. +TS"
  },
  {
    "name": "ts-fp-di",
    "url": "https://github.com/darky/ts-fp-di",
    "description": "Tiny TypeScript functional dependency injection, based on Node.js AsyncLocalStorage. +TS"
  },
  {
    "name": "effect-ts",
    "url": "https://github.com/Effect-TS/core"
  },
  {
    "name": "qio",
    "url": "https://github.com/tusharmath/qio"
  },
  {
    "name": "Ditox.js",
    "url": "https://github.com/mnasyrov/ditox",
    "description": "Powerful dependency injection container for building modular apps. +TS"
  },
  {
    "name": "RxEffects",
    "url": "https://github.com/mnasyrov/rx-effects",
    "description": "Reactive state and effect management with RxJS. +TS"
  },
  {
    "name": "fxts",
    "url": "https://github.com/marpple/FxTS",
    "description": "Lazy evaluation and concurrency. +TS"
  },
  {
    "name": "ts-belt",
    "url": "https://mobily.github.io/ts-belt/",
    "description": "Fast, modern, and practical utility library for FP in TypeScript. (Uses a data-first approach like remeda, but is faster than remeda, ramda, rambda, and lodash/fp.)"
  },
  {
    "name": "fp-multik",
    "url": "https://github.com/lulldev/fp-multik",
    "description": "JS/TS lightweight value-multimethod util"
  },
  {
    "name": "true-myth",
    "url": "https://github.com/true-myth/true-myth"
  },
  {
    "name": "ts-pattern",
    "url": "https://github.com/gvergnaud/ts-pattern",
    "description": "The exhaustive Pattern Matching library for TypeScript, with smart type inference. Pattern Matching is a code-branching technique coming from FP languages."
  },
  {
    "name": "hyogwa",
    "url": "https://github.com/ENvironmentSet/hyogwa",
    "description": "Natural üåø effect system that fits TypeScript; Write codes as you write plain typescript code."
  },
  {
    "name": "Icepick",
    "url": "https://github.com/aearly/icepick"
  },
  {
    "name": "Immutable.js",
    "url": "https://github.com/facebook/immutable-js"
  },
  {
    "name": "Immer",
    "url": "https://github.com/mweststrate/immer"
  },
  {
    "name": "Mori",
    "url": "https://github.com/swannodette/mori"
  },
  {
    "name": "Baobab",
    "url": "https://github.com/Yomguithereal/baobab"
  },
  {
    "name": "immutable-sequence.js",
    "url": "https://github.com/qiao/immutable-sequence.js"
  },
  {
    "name": "Timm",
    "url": "http://guigrpa.github.io/timm/"
  },
  {
    "name": "Lazy.js",
    "url": "https://github.com/dtao/lazy.js"
  },
  {
    "name": "DerivableJS",
    "url": "https://github.com/ds300/derivablejs"
  },
  {
    "name": "imlazy",
    "url": "https://github.com/benji6/imlazy"
  },
  {
    "name": "collectable",
    "url": "https://github.com/frptools/collectable"
  },
  {
    "name": "List",
    "url": "https://github.com/funkia/list",
    "description": "An extremely fast immutable list with a comprehensive functional API. Designed to seamlessly integrate with Ramda."
  },
  {
    "name": "prelude.ts",
    "url": "https://github.com/emmanueltouzery/prelude.ts",
    "description": "Immutable persistent collections, functional constructs such as Option and Either, and combinators. Implemented in Typescript but supports javascript too.  +CT, +TS."
  },
  {
    "name": "TSTL",
    "url": "https://github.com/samchon/tstl",
    "description": "C++ STL (Standard Template Library) is implemented in TypeScript. STL Containers, iterators, algorithms and functors, that following functional programming rule, are provided. +TS."
  },
  {
    "name": "Fantasy Land",
    "url": "https://github.com/fantasyland/fantasy-land"
  },
  {
    "name": "Static Land",
    "url": "https://github.com/rpominov/static-land"
  },
  {
    "name": "immutable-ext",
    "url": "https://github.com/DrBoolean/immutable-ext"
  },
  {
    "name": "daggy",
    "url": "https://github.com/puffnfresh/daggy"
  },
  {
    "name": "Sanctuary",
    "url": "https://github.com/plaid/sanctuary"
  },
  {
    "name": "monet.js",
    "url": "http://cwmyers.github.io/monet.js/"
  },
  {
    "name": "union-type",
    "url": "https://github.com/paldepind/union-type"
  },
  {
    "name": "freeky",
    "url": "https://github.com/DrBoolean/freeky"
  },
  {
    "name": "Fluture",
    "url": "https://github.com/Avaq/Fluture"
  },
  {
    "name": "fantasy-combinators",
    "url": "https://github.com/fantasyland/fantasy-combinators"
  },
  {
    "name": "fantasy-birds",
    "url": "https://github.com/fantasyland/fantasy-birds"
  },
  {
    "name": "crocks",
    "url": "https://github.com/evilsoft/crocks"
  },
  {
    "name": "kudo-js",
    "url": "https://github.com/blitzritz/kudojs",
    "description": "A small utility library with a set of Algebraic Data Types and Helper functions to help you write code in a functional programming style in Javascript"
  },
  {
    "name": "purify",
    "url": "https://github.com/gigobyte/purify",
    "description": "Functional programming library for TypeScript focusing on ADTs.  +CT, +TS."
  },
  {
    "name": "MojiScript",
    "url": "https://github.com/joelnet/MojiScript"
  },
  {
    "name": "Pratica",
    "url": "https://github.com/rametta/pratica",
    "description": "Small, simple, easy FP data types for pragmatic and productive developers who need to ship reliable code fast.  +CT, +TS."
  },
  {
    "name": "Tifi",
    "url": "https://github.com/mobily/tifi",
    "description": "Tifi is a library for functional programming in TypeScript. It solves a problem of the existence of both undefined and null. Tifi is inspired by the OCaml/Reason utilities for the option data type. +CT, +TS."
  },
  {
    "name": "lenses",
    "url": "https://github.com/DrBoolean/lenses"
  },
  {
    "name": "optics",
    "url": "https://github.com/flunc/optics"
  },
  {
    "name": "ramda-lens",
    "url": "https://github.com/ramda/ramda-lens"
  },
  {
    "name": "fantasy-lenses",
    "url": "https://github.com/fantasyland/fantasy-lenses"
  },
  {
    "name": "nanoscope",
    "url": "https://github.com/5outh/nanoscope"
  },
  {
    "name": "partial.lenses",
    "url": "https://github.com/calmm-js/partial.lenses"
  },
  {
    "name": "shades",
    "url": "https://github.com/jamesmcnamara/shades"
  },
  {
    "name": "ClojureScript",
    "url": "https://github.com/clojure/clojurescript"
  },
  {
    "name": "Elm",
    "url": "http://elm-lang.org/"
  },
  {
    "name": "Fable",
    "url": "http://fable.io/",
    "description": "Compiles F# to readable JavaScript."
  },
  {
    "name": "PureScript",
    "url": "http://www.purescript.org/"
  },
  {
    "name": "Idris",
    "url": "http://www.idris-lang.org/"
  },
  {
    "name": "GHCJS",
    "url": "https://github.com/ghcjs/ghcjs"
  },
  {
    "name": "ElixirScript",
    "url": "https://github.com/bryanjos/elixirscript"
  },
  {
    "name": "Js_of_ocaml",
    "url": "http://ocsigen.org/js_of_ocaml/"
  },
  {
    "name": "Reason",
    "url": "https://reasonml.github.io"
  },
  {
    "name": "ReScript",
    "url": "https://rescript-lang.org/"
  },
  {
    "name": "Scala.js",
    "url": "http://www.scala-js.org/"
  },
  {
    "name": "LiveScript",
    "url": "http://gkz.github.io/LiveScript/"
  },
  {
    "name": "Quack",
    "url": "https://github.com/quack/quack",
    "description": "A multi-paradigm programming language with gradual and duck typing that targets PHP and JS."
  },
  {
    "name": "ion",
    "url": "https://github.com/ion-lang/ion",
    "description": "no BS JS"
  },
  {
    "name": "RamdaScript",
    "url": "https://github.com/yosbelms/ramdascript",
    "description": "A Lisp that compiles to opinionated JavaScript on top of RamdaJS"
  },
  {
    "name": "RacketScript",
    "url": "https://github.com/vishesh/racketscript"
  },
  {
    "name": "Koka",
    "url": "https://www.microsoft.com/en-us/research/project/koka/"
  },
  {
    "name": "TypeScript",
    "url": "https://www.typescriptlang.org/",
    "description": "TypeScript is a typed superset of JavaScript that compiles to plain JavaScript."
  },
  {
    "name": "Gleam",
    "url": "https://gleam.run",
    "description": "Gleam is a typed, functional language that compiles to Erlang and JavaScript."
  },
  {
    "name": "eslint-plugin-fp",
    "url": "https://github.com/jfmengels/eslint-plugin-fp",
    "description": "ESLint rules for functional programming"
  },
  {
    "name": "4.5",
    "url": "https://github.com/TylorS/4.5"
  },
  {
    "name": "hm-def",
    "url": "https://github.com/xodio/hm-def"
  },
  {
    "name": "ftor",
    "url": "https://github.com/kongware/ftor",
    "description": "A pluggable runtime type checker and functional debugging tool that supports parametric and row polymorphism, implicit rank-2 types and algebraic data types via Scott Encoding."
  },
  {
    "name": "Professor Frisby‚Äôs Mostly Adequate Guide to Functional Programming",
    "url": "https://github.com/MostlyAdequate/mostly-adequate-guide"
  },
  {
    "name": "Functional-Light JavaScript",
    "url": "https://github.com/getify/functional-light-js"
  },
  {
    "name": "JavaScript Allong√©",
    "url": "https://leanpub.com/javascriptallongesix"
  },
  {
    "name": "Functional Programming in JavaScript",
    "url": "https://www.manning.com/books/functional-programming-in-javascript"
  },
  {
    "name": "Eloquent JavaScript",
    "url": "http://eloquentjavascript.net/"
  },
  {
    "name": "Functional JavaScript",
    "url": "http://shop.oreilly.com/product/0636920028857.do"
  },
  {
    "name": "Grokking Simplicity",
    "url": "https://www.manning.com/books/grokking-simplicity"
  },
  {
    "name": "scriptum",
    "url": "https://github.com/kongware/scriptum/blob/master/README.md",
    "description": "a no-frills functional programming library and a online course based on it"
  },
  {
    "name": "FP Concepts in JavaScript",
    "url": "https://medium.com/@collardeau/intro-to-functional-programming-concepts-in-javascript-b0650773139c"
  },
  {
    "name": "Functional programming with JavaScript",
    "url": "http://stephen-young.me.uk/2013/01/20/functional-programming-with-javascript.html"
  },
  {
    "name": "A gentle introduction to functional JavaScript",
    "url": "http://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-intro/"
  },
  {
    "name": "Functors from first principle - explained with JS",
    "url": "https://dev.to/snird/functors-from-first-principle-37lh",
    "description": "explained with JS - Explaining functors concept using JavaScript."
  },
  {
    "name": "Why Curry Helps",
    "url": "https://hughfdjackson.com/javascript/why-curry-helps/"
  },
  {
    "name": "Favoring Curry",
    "url": "http://fr.umio.us/favoring-curry/",
    "description": "Practical applications of currying using Ramda."
  },
  {
    "name": "Functional Mumbo Jumbo ‚Äì ADTs",
    "url": "http://blog.jenkster.com/2016/06/functional-mumbo-jumbo-adts.html"
  },
  {
    "name": "JavaScript and Type Thinking",
    "url": "https://medium.com/@yelouafi/javascript-and-type-thinking-735edddc388d"
  },
  {
    "name": "Lazy, composable, and modular JavaScript",
    "url": "https://codewords.recurse.com/issues/four/lazy-composable-and-modular-javascript"
  },
  {
    "name": "Why Ramda",
    "url": "http://fr.umio.us/why-ramda/"
  },
  {
    "name": "Monads in JavaScript",
    "url": "https://curiosity-driven.org/monads-in-javascript"
  },
  {
    "name": "A Monad in Practicality: First-Class Failures",
    "url": "http://robotlolita.me/2013/12/08/a-monad-in-practicality-first-class-failures.html"
  },
  {
    "name": "Functional programming",
    "url": "https://glebbahmutov.com/blog/tags/functional/"
  },
  {
    "name": "Functional Programming Jargon",
    "url": "https://github.com/hemanth/functional-programming-jargon"
  },
  {
    "name": "Data Structures in JavaScript",
    "url": "http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/"
  },
  {
    "name": "So You Want to be a Functional Programmer",
    "url": "https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536",
    "description": "Easy to understand, with some examples, introduction to Functional Programming in Javascript and Elm."
  },
  {
    "name": "Functional Programming for JavaScript People",
    "url": "https://medium.com/@chetcorcos/functional-programming-for-javascript-people-1915d8775504",
    "description": "A complete introduction to functional programming patterns by Chet Corcos with a lot of javascript examples."
  },
  {
    "name": "Introduction to Immutable.js and Functional Programming Concepts",
    "url": "https://auth0.com/blog/intro-to-immutable-js/",
    "description": "Learn about functional data structures and their uses in this overview of Facebook's popular library for JavaScript: Immutable.js."
  },
  {
    "name": "Master the JavaScript Interview: What is Functional Programming?",
    "url": "https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0",
    "description": "A simple introduction by @ericelliott to functional principles and vocabulary."
  },
  {
    "name": "Composing Software",
    "url": "https://medium.com/javascript-scene/the-rise-and-fall-and-rise-of-functional-programming-composable-software-c2d91b424c8c",
    "description": "A series of articles on learning functional programming and compositional software techniques in JavaScript ES6+ from the ground up by @ericelliott."
  },
  {
    "name": "Anonymous Recursion in JavaScript",
    "url": "https://dev.to/simov/anonymous-recursion-in-javascript",
    "description": "Short and easy to understand article about implementing anonymous recursion in JavaScript."
  },
  {
    "name": "Functional Composition in Javascript",
    "url": "https://joecortopassi.com/articles/functional-composition-in-javascript/"
  },
  {
    "name": "Functional Programming Principles in Javascript",
    "url": "https://medium.freecodecamp.org/functional-programming-principles-in-javascript-1b8fc6c3563f",
    "description": "Practical code examples to learn functional programming concepts like pure function, immutability, first-class entities, and higher order functions"
  },
  {
    "name": "Basic Monads in Javascript",
    "url": "https://dev.to/rametta/basic-monads-in-javascript-3el3",
    "description": "Introduction to 2 easy monads in Javascript, Maybe & Either."
  },
  {
    "name": "F# for JavaScript Devs",
    "url": "https://dev.to/rametta/f-for-js-devs-2b88",
    "description": "Showcasing the similarities between F# and JavaScript"
  },
  {
    "name": "A practical guide to writing more functional Javascript",
    "url": "https://medium.com/@nadeesha/a-practical-guide-to-writing-more-functional-javascript-db49409f71",
    "description": "A step by step guide to convert imperative JavaScript to more declarative, functional JavaScript."
  },
  {
    "name": "You don't (may not) need loops ‚ûø",
    "url": "https://github.com/you-dont-need/You-Dont-Need-Loops",
    "description": "Loops are one of the first constructs that junior programmers learn, but they can pose many potential issues in the software development process, and could be avoided in many cases."
  },
  {
    "name": "Classroom Coding with Prof. Frisby",
    "url": "https://www.youtube.com/watch?v=h_tkIpwbsxY&list=PLK_hdtAJ4KqX0JOs_KMAmUNTNMRYhWEaC"
  },
  {
    "name": "Hey Underscore, You're Doing It Wrong!",
    "url": "https://www.youtube.com/watch?v=m3svKOdZijA"
  },
  {
    "name": "Functional programming patterns for the non-mathematician",
    "url": "https://www.youtube.com/watch?v=AvgwKjTPMmM"
  },
  {
    "name": "Pure JavaScript",
    "url": "https://vimeo.com/49384334"
  },
  {
    "name": "Functional programming in JavaScript",
    "url": "https://www.youtube.com/playlist?list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84",
    "description": "A series by Mattias Petter Johansson, from the youtube channel FunFunFunction, that is specifically about popularization of functional programming in JavaScript."
  },
  {
    "name": "Functional Programming in TypeScript",
    "url": "https://www.youtube.com/playlist?list=PLuPevXgCPUIMbCxBEnc1dNwboH6e2ImQo",
    "description": "Discover functional programming with Typescript and create a library like fp-ts alongside Sahand Javid in this beginner-friendly YouTube playlist."
  },
  {
    "name": "Anjana Vakil: Learning Functional Programming with JavaScript - JSUnconf 2016",
    "url": "https://www.youtube.com/watch?v=e-5obm1G_FY",
    "description": "JSUnconf 2016 - A simple and understandable introduction of functional proramming in javascript."
  },
  {
    "name": "Functional Programming Basics In ES6",
    "url": "https://www.youtube.com/watch?v=FYXpOjwYzcs",
    "description": "A complete introduction to functional programming in javascript made it easy by ES6."
  },
  {
    "name": "JavaScript Programmers Should Learn Algebraic Data Types -- May 2018 -- UtahJS Lehi",
    "url": "https://www.youtube.com/watch?v=B0VoyujJWIE",
    "description": "Seth House explains how ADTs (Algebraic Data Types) can be useful to JavaScript developers."
  },
  {
    "name": "FPJS-Class",
    "url": "https://github.com/loop-recur/FPJS-Class"
  },
  {
    "name": "functional-javascript-workshop",
    "url": "https://github.com/timoxley/functional-javascript-workshop"
  },
  {
    "name": "functional-frontend-architecture",
    "url": "https://github.com/paldepind/functional-frontend-architecture"
  },
  {
    "name": "cube-composer",
    "url": "https://github.com/sharkdp/cube-composer"
  },
  {
    "name": "FP Youtube Search",
    "url": "https://github.com/jaysoo/example-fp-youtube-search"
  },
  {
    "name": "Hardcore Functional Programming in JavaScript",
    "url": "https://frontendmasters.com/courses/functional-javascript/"
  },
  {
    "name": "Escape from Callback Mountain",
    "url": "https://github.com/justsml/escape-from-callback-mountain",
    "description": "Design & refactoring tips for Promise-based Functional JavaScript. Key benefits include better readability, testability, and reusability. MIT."
  },
  {
    "name": "Learn Rx",
    "url": "http://reactivex.io/learnrx/"
  },
  {
    "name": "Holdem Evaluator",
    "url": "https://github.com/laberin/holdem-eval",
    "description": "Yet another Holdem Evaluator with Ramda functional style"
  },
  {
    "name": "Awesome FRP JS",
    "url": "https://github.com/stoeffel/awesome-frp-js"
  },
  {
    "name": "lucasviola/Awesome Functional Programming",
    "url": "https://github.com/lucasviola/awesome-functional-programming"
  },
  {
    "name": "xgrommx/Awesome Functional Programming",
    "url": "https://github.com/xgrommx/awesome-functional-programming"
  },
  {
    "name": "Functional Programming Resources In JavaScript",
    "url": "https://github.com/busypeoples/functional-programming-javascript"
  },
  {
    "name": "tk-learning-center/Functional Programming Learning Path",
    "url": "https://github.com/tk-learning-center/functional-programming-learning-path",
    "description": "A Learning Path for Functional Programming"
  },
  {
    "name": "Functional Programming Slack channel",
    "url": "https://fpslack.com/"
  }
]